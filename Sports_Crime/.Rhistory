labs(y = "Latitude", x = "Longitude", title = "Figure I -\nCluster Plot of Cleaned Location Data") +
theme_light()
show(b)
ggsave("class_projects/midterm/[cleaned] - Clustered Map Data.png")
rm(b, kms, ALPHA)
# Steven Wasserman, sw4kh
# SYS 2202, 02/27/2020
# Midterm Project: Working File
# -------------------------------------------------- #
### [DATA IMPORT] ###
# Call necessary libraries
library(DBI)
library(RMySQL)
# Establish the connection to AWARE Framework
connection <- dbConnect(MySQL(),
user = 'Wasserman_2833',
password = 'JNCBgQSi',
dbname = 'Wasserman_2833',
host = 'awareframework.com',
port = 3306
)
# Import the data from each table into a separate data frame
# Locations data:
L = dbSendQuery(connection, "select * from locations")
locations = fetch(L, n = -1)
# This line resets the connection before continuing
dbClearResult(dbListResults(connection)[[1]])
rm(connection, L)
# -------------------------------------------------- #
### [DATA MANIPULATION] ###
# Creates a new data frame for the 'timestamp' column in each table
# And adds that data frame as a new column in the table
# Thanks TA Ian Liu (yl4dt)!
# Calls necessary libraries
library(dplyr)
library(tidyverse)
# Locations data:
# Converts from UNIX-Time to a human readable format...
t <- locations$timestamp
z <- 0
options(digits.secs=3)
r <- data.frame(.POSIXct((t+z)/1000, tz="UTC"))
locations["readable_timestamp"] <- r
# ... and splits the time-related values into different columns
locations <- separate(locations, readable_timestamp, c("YEAR","MONTH","DAY"), sep="-", remove = FALSE)
locations <- separate(locations, DAY, c("DAY", "TIME"), sep=" ", remove = FALSE)
locations <- separate(locations, TIME, c("HOUR", "MINUTE", "SECOND"), sep=":", remove = TRUE)
locations$SECOND <- as.integer(locations$SECOND)
# Convert the new data columns from ch to int
locations$YEAR <- strtoi(locations$YEAR)
locations$MONTH <- strtoi(locations$MONTH)
locations$DAY <- strtoi(locations$DAY)
locations$HOUR <- strtoi(locations$HOUR)
locations$MINUTE <- strtoi(locations$MINUTE)
locations$SECOND <- strtoi(locations$SECOND)
rm(t, z, r)
# -------------------------------------------------- #
### [DATA VISUALIZATION : PRE-CLEAN] ###
# Calls the necessary libraries
library(ggplot2)
library(ggmap)
library(sp)
library(sf)
library(maptools)
library(maps)
library(sf)
library(usmap)
# Creates a map showing data points in the DMV/VA areas
# Thanks TA Ian Liu (yl4dt)!
visit.x <- locations$double_longitude
visit.y <- locations$double_latitude
DMV_MAP = ggplot() +
borders("state", regions = c("virginia", "maryland", "north carolina", "west virginia"), colour = "black", fill = "white") +
ylim( 36.50, 39.50) +
xlim(-83.75, -75.0) +
geom_point(aes( x = visit.x, y = visit.y), color = "darkblue") +
scale_size(range=c(1,1)) +
theme(legend.position = "none")
show(DMV_MAP)
ggsave("class_projects/midterm/[pre-clean] - DMV Map.png")
VA_MAP = ggplot() +
borders("county", regions = "virginia", colour = "black", fill = "white") +
ylim( 36.50, 39.50) +
xlim(-83.75, -75.0) +
geom_point(aes( x = visit.x, y = visit.y), color = "darkorange") +
scale_size(range=c(1,1)) +
theme(legend.position = "none")
show(VA_MAP)
ggsave("class_projects/midterm/[pre-clean] - VA Map.png")
rm(visit.x, visit.y, DMV_MAP, VA_MAP)
# -------------------------------------------------- #
### [DATA CLEANING] ###
# Remove records where longitude or latitude equal zero OR are NaN
temp <- filter(locations,
!(locations$double_longitude == 0),
!(locations$double_latitude == 0),
!(is.na(double_longitude)),
!(is.na(double_longitude)),
)
# Removes duplicate rec1ords (where attributes are equal in different records)
# NOTE: "_id" will be unique for each line, so it must be removed
temp$"_id" <- 0
duplicated_locations <- nrow(temp[duplicated(temp), ])
temp <- temp[!(duplicated(temp["readable_timestamp"])), ]
temp$"_id" <- c(1:NROW(temp))
# "Round off" longitude and latitude data
temp$double_latitude <- round(x = temp$double_latitude,
digits = 4)
temp$double_longitude <- round(x = temp$double_longitude,
digits = 4)
locations <- temp
rm(temp)
# Cluster plot of cleaned data in all of Virginia
ALPHA = 8
kms <- kmeans( x=cbind(locations$double_latitude, locations$double_longitude),
centers = ALPHA)
locations$cluster <- as.character(kms$cluster)
b = ggplot() +
geom_point(data = locations,
mapping = aes(x = double_longitude,
y = double_latitude,
colour = cluster)) +
geom_point(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1]),
color = "red", size = 4) +
geom_text(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1],
label = 1:ALPHA),
color = "black", size = 4)
b = b +
labs(y = "Latitude", x = "Longitude", title = "Figure I -\nCluster Plot of Cleaned Location Data") +
theme_light()
show(b)
ggsave("class_projects/midterm/[cleaned] - Clustered Map Data.png")
rm(b, kms, ALPHA)
# -------------------------------------------------- #
### [DATA PROCESSING] ###
# Obtain data within the correct area (Charlottesville) based on long-lat research
cville <- filter(locations,
(37.99 < locations$double_latitude),
(locations$double_latitude < 38.15),
(-78.53 < locations$double_longitude),
(locations$double_longitude < -78.41)
)
# Measure the frequency of records for a given latitude-longitude pair...
frequent <- cville %>% group_by(double_longitude, double_latitude) %>% tally()
# And include only locations with 100 or more records determining top locations visited
frequent_locations <- filter(frequent, n > 100)
# Plot these locations onto an interactive map
library(leaflet)
leaflet(data = frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
ggsave("class_projects/midterm/Frequented Locations Leaflet Map.png")
# Generate further accuracy by only plotting locations with 1000 records or more
most_frequent_locations <- filter(frequent, n > 1000)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
ggsave("class_projects/midterm/Most Frequented Locations Leaflet Map.png")
# Create a cluster plot for this distribution as well
ALPHA = 5
kms <- kmeans( x=cbind(most_frequent_locations$double_latitude, most_frequent_locations$double_longitude),
centers = ALPHA)
cville$cluster <- as.character(kms$cluster)
b = ggplot() +
geom_point(data = most_frequent_locations,
mapping = aes(x = double_longitude,
y = double_latitude,
colour = cluster)) +
geom_point(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1]),
color = "red", size = 4) +
geom_text(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1],
label = 1:ALPHA),
color = "black", size = 4)
b = b +
labs(y = "Latitude", x = "Longitude", title = "Figure III -\nCluster Plot of Most Frequented Locations") +
theme_light()
show(b)
ggsave("class_projects/midterm/Most Frequented Locations Clustered Map Data.png")
rm(b, kms, ALPHA)
# Generate further accuracy by only plotting locations with 500 records or more
most_frequent_locations <- filter(frequent, n > 500)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
# Generate further accuracy by only plotting locations with 500 records or more
most_frequent_locations <- filter(frequent, n > 300)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
# Generate further accuracy by only plotting locations with 500 records or more
most_frequent_locations <- filter(frequent, n > 200)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
# Generate further accuracy by only plotting locations with 500 records or more
most_frequent_locations <- filter(frequent, n > 500)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
ggsave("class_projects/midterm/Most Frequented Locations Leaflet Map.png")
# Create a cluster plot for this distribution as well
ALPHA = 5
kms <- kmeans( x=cbind(most_frequent_locations$double_latitude, most_frequent_locations$double_longitude),
centers = ALPHA)
cville$cluster <- as.character(kms$cluster)
b = ggplot() +
geom_point(data = most_frequent_locations,
mapping = aes(x = double_longitude,
y = double_latitude,
colour = cluster)) +
geom_point(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1]),
color = "red", size = 4) +
geom_text(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1],
label = 1:ALPHA),
color = "black", size = 4)
b = b +
labs(y = "Latitude", x = "Longitude", title = "Figure III -\nCluster Plot of Most Frequented Locations") +
theme_light()
show(b)
# Create a cluster plot for this distribution as well
ALPHA = 5
kms <- kmeans( x=cbind(most_frequent_locations$double_latitude, most_frequent_locations$double_longitude),
centers = ALPHA)
cville$cluster <- as.character(kms$cluster)
b = ggplot() +
geom_point(data = most_frequent_locations,
mapping = aes(x = double_longitude,
y = double_latitude,
colour = cluster)) +
geom_point(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1]),
color = "red", size = 4) +
geom_text(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1],
label = 1:ALPHA),
color = "black", size = 4)
b = b +
labs(y = "Latitude", x = "Longitude", title = "Figure III -\nCluster Plot of Most Frequented Locations") +
theme_light()
show(b)
ggsave("class_projects/midterm/Most Frequented Locations Clustered Map Data.png")
# Create a cluster plot for this distribution as well
ALPHA = 5
kms <- kmeans( x=cbind(most_frequent_locations$double_latitude, most_frequent_locations$double_longitude),
centers = ALPHA)
# Create a cluster plot for this distribution as well
ALPHA = 5
kms <- kmeans( x=cbind(most_frequent_locations$double_latitude, most_frequent_locations$double_longitude),
centers = ALPHA)
most_frequent_locations$cluster <- as.character(kms$cluster)
b = ggplot() +
geom_point(data = most_frequent_locations,
mapping = aes(x = double_longitude,
y = double_latitude,
colour = cluster)) +
geom_point(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1]),
color = "red", size = 4) +
geom_text(mapping = aes_string(x = kms$centers[, 2],
y = kms$centers[, 1],
label = 1:ALPHA),
color = "black", size = 4)
b = b +
labs(y = "Latitude", x = "Longitude", title = "Figure III -\nCluster Plot of Most Frequented Locations") +
theme_light()
show(b)
ggsave("class_projects/midterm/Most Frequented Locations Clustered Map Data.png")
# Measure the frequency of records for a given latitude-longitude pair...
frequent <- cville %>% group_by(double_longitude, double_latitude) %>% tally()
# And include only locations with 100 or more records determining top locations visited
frequent_locations <- filter(frequent, n > 100)
# Plot these locations onto an interactive map
library(leaflet)
leaflet(data = frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
# Measure the frequency of records for a given latitude-longitude pair...
frequent <- cville %>% group_by(double_longitude, double_latitude) %>% tally()
# And include only locations with 100 or more records determining top locations visited
frequent_locations <- filter(frequent, n > 100)
# Plot these locations onto an interactive map
library(leaflet)
leaflet(data = frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
# Generate further accuracy by only plotting locations with 500 records or more
most_frequent_locations <- filter(frequent, n > 500)
leaflet(data = most_frequent_locations) %>% addTiles() %>%
addMarkers(~double_longitude, ~double_latitude, popup = ~as.character(n), label = ~as.character(n))
source('~/.active-rstudio-document')
# Steven Wasserman, sw4kh
# SYS 2202, Due: 03/13/2020
# Assignment III - Cleaning and Visualizing Your Data
# -------------------------------------------------- #
# 1 "Either directly connect to the database through R or use the exported
# data from each table (a CSV format) and import it in R. Note: you should
# handle each table for missing data and noise separately."
# Call the libraries
library(DBI)
library(RMySQL)
# Establish the connection to AWARE Framework
connection <- dbConnect(MySQL(),
user = 'Wasserman_2833',
password = 'JNCBgQSi',
dbname = 'Wasserman_2833',
host = 'awareframework.com',
port = 3306
)
# Get the list of tables from AWARE
dbListTables(connection)
# -------------------------------------------------- #
# 2 "Import the data from each table into a separate data frame"
# Import the data from each table into a separate data frame
# For the Locations data...
locations = dbSendQuery(connection, "select * from locations")
TBL_L = fetch(locations, n = -1)
# This line resets the connection before continuing
dbClearResult(dbListResults(connection)[[1]])
# For the Screen Activity data...
screen = dbSendQuery(connection, "select * from screen")
TBL_S = fetch(screen, n = -1)
dbClearResult(dbListResults(connection)[[1]])
# For the Plug-in iOS Activity data...
activity = dbSendQuery(connection, "select * from plugin_ios_activity_recognition")
TBL_A = fetch(activity, n = -1)
dbClearResult(dbListResults(connection)[[1]])
# For the Calls data...
calls = dbSendQuery(connection, "select * from calls")
TBL_C = fetch(calls, n = -1)
dbClearResult(dbListResults(connection)[[1]])
# -------------------------------------------------- #
# 3 "Create a new DateTime column based on the timestamp for each table. "
# Creates a new data frame for the 'timestamp' column in TBL_L
# And adds that column back to the table
# Thanks TA Ian Liu!
TIME_EDIT <- TBL_L$timestamp
TIMEZONE <- 0
options(digits.secs=3)
READABLE <- data.frame(.POSIXct((TIME_EDIT+TIMEZONE)/1000, tz="UTC"))
TBL_L["human_timestamp"] <- READABLE
# Repeats the process for the Screen Activity, Plug-in iOS
# Activity, and Calls data...
TIME_EDIT <- TBL_S$timestamp
options(digits.secs=3)
READABLE <- data.frame(.POSIXct((TIME_EDIT+TIMEZONE)/1000, tz="UTC"))
TBL_S["human_timestamp"] <- READABLE
#
TIME_EDIT <- TBL_A$timestamp
options(digits.secs=3)
READABLE <- data.frame(.POSIXct((TIME_EDIT+TIMEZONE)/1000, tz="UTC"))
TBL_A["human_timestamp"] <- READABLE
#
TIME_EDIT <- TBL_C$timestamp
options(digits.secs=3)
READABLE <- data.frame(.POSIXct((TIME_EDIT+TIMEZONE)/1000, tz="UTC"))
TBL_C["human_timestamp"] <- READABLE
# Clear variables we do not need
rm(locations)
rm(screen)
rm(activity)
rm(calls)
rm(connection)
rm(TIME_EDIT)
rm(TIMEZONE)
rm(READABLE)
# -------------------------------------------------- #
# 4 "Plot your data before cleaning and smoothing. You can use basic
# statistical graphs or visualization packages. For location data use
# map packages."
# Call the necessary libraries
library(ggplot2)
library(ggmap)
library(sp)
library(sf)
library(maptools)
library(maps)
library(sf)
library(usmap)
library(dplyr)
library(tidyverse)
# Locations data --> Check to see that all recorded locations are within VA area
visit.x <- TBL_L$double_longitude
visit.y <- TBL_L$double_latitude
world_PRE_CLEAN = ggplot() +
borders("world",
colour = "black",
fill="white") +
ylim(-60,90)+
geom_point(aes ( x = visit.x,
y = visit.y),
color = "darkorange") +
scale_size(range = c(1,1)) +
theme(legend.position = "none")
show(world_PRE_CLEAN)
ggsave("World Map of Location Data (Pre-Clean).pdf")
install.packages(c("DT", "ggrepel", "shinycssloaders", "shinythemes"))
library(shiny); runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
observe({
option <- Sports_Crime$Opponent
sites <- filtered_data %>%
filter(filtered_data$option %in% opponent)
leafletProxy("mapPlot") %>% clearMarkers() %>%
addMarkers(lng = sites$longitude,
lat = sites$latitude,
color = sites$sport)
})
shinyApp(
ui = fluidPage(
selectInput(inputId = "option",
label = "Select Opponent School",
choices = sort(unique(Sports_Crime$Opponent)),
width = "220px"
)
leafletOutput("mapPlot")
),
server = function(input, output) {
output$mapPlot <- renderLeaflet({
leaflet() %>%
setView(lng = -78.47, lat = 38.03, zoom = 2)
})
observe({
option <- Sports_Crime$Opponent
sites <- filtered_data %>%
filter(filtered_data$option %in% opponent)
leafletProxy("mapPlot") %>% clearMarkers() %>%
addMarkers(lng = sites$longitude,
lat = sites$latitude,
color = sites$sport)
})
}
)
shinyApp(
ui = fluidPage(
selectInput(inputId = "option",
label = "Select Opponent School",
choices = sort(unique(Sports_Crime$Opponent)),
width = "220px"
)
leafletOutput("mapPlot")
),
server = function(input, output) {
output$mapPlot <- renderLeaflet({
leaflet() %>%
setView(lng = -78.47, lat = 38.03, zoom = 2)
})
observe({
option <- Sports_Crime$Opponent
sites <- filtered_data %>%
filter(filtered_data$option %in% opponent)
leafletProxy("mapPlot") %>% clearMarkers() %>%
addMarkers(lng = sites$longitude,
lat = sites$latitude,
color = sites$sport)
})
}
)
shinyApp(
ui = fluidPage(
selectInput(inputId = "option",
label = "Select Opponent School",
choices = sort(unique(Sports_Crime$Opponent)),
width = "220px"
)
leafletOutput("mapPlot")
),
server = function(input, output) {
output$mapPlot <- renderLeaflet({
leaflet() %>%
setView(lng = -78.47, lat = 38.03, zoom = 2)
})
observe({
option <- Sports_Crime$Opponent
sites <- filtered_data %>%
filter(filtered_data$option %in% opponent)
leafletProxy("mapPlot") %>% clearMarkers() %>%
addMarkers(lng = sites$longitude,
lat = sites$latitude,
color = sites$sport)
})
}
)
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
runApp('temp.R')
library(shiny); runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
runApp('C:/Users/student/Documents/Program Documents/GitHub/School/SYS 2202/Final Project/SYS2202Final/Sports_Crime/simple_shiny.R')
