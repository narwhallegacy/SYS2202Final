summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final = c(summary.final$Movie.title,summary.final$Release.year,summary.final[,-(1:3)]
summary.final = c(summary.final$Movie.title,summary.final$Release.year,summary.final[,-1:3]
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
summary.final = c(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
summary.final = c(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
head(summary.final)
tail(summary.final)
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
head(summary.final)
tail(summary.final)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
names(summary.final)[1:2] = c("Movie.title","Release.year")
head(summary.final)
tail(summary.final)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
names(summary.final)[1:2] = c("Movie.title","Release.year")
head(summary.final)
tail(summary.final)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
names(summary.final)[1:2] = c("Movie.title","Release.year")
head(summary.final)
tail(summary.final)
head(summary.final[order(summary.final$rating.prop.5s)])
head(summary.final[order(summary.final$rating.prop.5s)])
summary.final[order(summary.final$rating.prop.5s)]
summary.final[order(summary.final$rating.prop.5s),]
?order
summary.final[order(summary.final$rating.prop.5s,decreasing=TRUE),]
summary.final = summary.final[order(summary.final$rating.prop.5s,decreasing=TRUE),]
head(summary.final)
tail(summary.final)
View(summary.final)
View(summary.final)
?min
pmin(ratings.final$rating.prop.5s-ratings.final$rating.prop.1s)
ratings.final$rating.prop.5s-ratings.final$rating.prop.1s
summary.final$rating.prop.5s-summary.final$rating.prop.1s
pmin(abs(summary.final$rating.prop.5s-summary.final$rating.prop.1s))
dif=summary.final$rating.prop.5s-summary.final$rating.prop.1s
dif=abs(summary.final$rating.prop.5s-summary.final$rating.prop.1s)
mdif = min(dif)
sim15l = dif==mdif
summary.final$Movie.title[sim15l]
summary.final$Movie.title[sim15l]
summary.final$Movie.title
dif=abs(summary.final$rating.prop.5s-summary.final$rating.prop.1s)
mdif = min(dif)
sim15l = dif==mdif
summary.final[sim15l,]
read.csv("Homework 6 Data 1.csv")
read.csv("Homework 6 Data 1.csv")
data1=read.csv("Homework 6 Data 1.csv")
View(data1)
View(data1)
library(ggplot2)
ratings = read.csv("final_projdata.csv")
ratings$date = as.Date.factor(ratings$date)
#Creating individual dataframe for each movie
ratings = ratings[order(ratings$MONTH),]
pocahontas = ratings[which(ratings$ï..movie.ID == 3414),]
shrek2 = ratings[which(ratings$ï..movie.ID == 3938),]
diehard = ratings[which(ratings$ï..movie.ID == 9960),]
blindside = ratings[which(ratings$ï..movie.ID == 12227),]
andygriffith = ratings[which(ratings$ï..movie.ID == 13375),]
peeptom = ratings[which(ratings$ï..movie.ID == 14258),]
friends = ratings[which(ratings$ï..movie.ID == 15777),]
dirtyharry= ratings[which(ratings$ï..movie.ID == 16721),]
godfather = ratings[which(ratings$ï..movie.ID == 16722),]
willgrace = ratings[which(ratings$ï..movie.ID == 16724),]
titanic = ratings[which(ratings$ï..movie.ID == 16879),]
meetparents = ratings[which(ratings$ï..movie.ID == 17088),]
#Talking average of each month
pocahontasA = c()
shrek2A = c()
diehardA = c()
blindsideA = c()
andygriffithA = c()
peeptomA = c()
friendsA = c()
dirtyharryA = c()
godfatherA = c()
willgraceA = c()
titanicA = c()
meetparentsA = c()
for (i in (1:12))
{
pocahontasA = c(pocahontasA,mean(pocahontas$rating[which(pocahontas$MONTH == i)]))
shrek2A = c(shrek2A,mean(shrek2$rating[which(shrek2$MONTH == i)]))
diehardA = c(diehardA,mean(diehard$rating[which(diehard$MONTH == i)]))
blindsideA = c(blindsideA,mean(blindside$rating[which(blindside$MONTH == i)]))
andygriffithA = c(andygriffithA,mean(andygriffith$rating[which(andygriffith$MONTH == i)]))
peeptomA = c(peeptomA,mean(peeptom$rating[which(peeptom$MONTH == i)]))
friendsA = c(friendsA,mean(friends$rating[which(friends$MONTH == i)]))
dirtyharryA = c(dirtyharryA,mean(dirtyharry$rating[which(dirtyharry$MONTH == i)]))
godfatherA = c(godfatherA,mean(godfather$rating[which(godfather$MONTH == i)]))
willgraceA = c(willgraceA,mean(willgrace$rating[which(willgrace$MONTH == i)]))
titanicA = c(titanicA,mean(titanic$rating[which(titanic$MONTH == i)]))
meetparentsA = c(meetparentsA,mean(meetparents$rating[which(meetparents$MONTH == i)]))
}
#Converting into a dataframe
monthavgs = data.frame(andygriffithA,blindsideA,diehardA,dirtyharryA,friendsA,godfatherA,meetparentsA,peeptomA,pocahontasA,shrek2A,titanicA,willgraceA)
names12 = rep(c("Pocahontas","Shrek 2","Die Hard","The Blind Side", "The Andy Griffith Show","Peeping Tom","FRIENDS","Dirty Harry","The Godfather Trilogy","Will & Grace","Titanic","Meet the Parents"),rep(12,12))
monthavgslong = data.frame(names12,rep(1:12,12),c(pocahontasA,shrek2A,diehardA,blindsideA,andygriffithA,peeptomA,friendsA,dirtyharryA,godfatherA,willgraceA,titanicA,meetparentsA))
names(monthavgslong) = c("Movie","Month","AverageRating")
#ggplot
ggplot(monthavgslong, aes(x=Month, y=AverageRating, color=Movie)) + geom_line() + geom_point()
ggplot(Netflix.long, aes(x=Yr.Qtr, y=Rev.ppaid, colour=Service, group=Service)) + geom_line() + geom_point(aes(shape=Service)) # Here the shape aesthetic
## In base R
counts <- table(Ratings$rating)
#########################################################################
#                                                                       #
#  Notes 5.2 - Graphical analysis in R                                  #
#                                                                       #
#########################################################################
#  Dont forget to run the next line to load the ggplot2 package.        #
library(ggplot2)
setwd("~/Desktop/STAT 1601/data")
Netflix.long <- read.csv("Netflix2_Long.csv", header=TRUE)
Ratings <- read.csv("Ratings1.csv", header=TRUE)
Ratings2 <- read.csv("Ratings12.csv", header=TRUE)
##############################
#  Density plot (continued)  #
##############################
#  In order to split the graphic window into multiple plots, a layer    #
#  using the function facet_grid() is added to the graphic. The input   #
#  to facet grid indicates how the user would like the graphic split.   #
#  The input to facet_grid must specify precisely how we would like the #
#  graphic to be split up. The function vars() works in a simlar way to #
#  aes(). It lets us access the names of the variables from the data.   #
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_density()
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_density() + facet_grid(rows = vars(Service))
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_density() + facet_grid(cols = vars(Service))
###############
#  Histogram  #
###############
#  Histograms are the most detailed method for visualizing a            #
#  quantitative distribution. The values of the data are broken into    #
#  several equal-sized groups, typically called bins. The count of      #
#  observations in each bin is represented by the height of the bar     #
#  corresponding to the bin. The number of bins a histogram contains    #
#  can vary and should be chosen to show an appropriate level of        #
#  detail.                                                              #
## In base R
hist(Netflix.long$Rev.ppaid)
## In ggplot2
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_histogram()
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_histogram(binwidth =5)
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_histogram(binwidth=2.5, colour="black", fill="white")
#  Histograms of multiple distributions can be compared in the same     #
#  ways as density plots with some adjustments.                         #
# Single plot comparison
ggplot(Netflix.long, aes(x=Rev.ppaid, colour=Service, fill=Service)) +
geom_histogram(binwidth=2.5, alpha=0.3, position="identity")
# Multiplot comparison
ggplot(Netflix.long, aes(x=Rev.ppaid)) + geom_histogram(binwidth=2.5, colour="black", fill="white") +
facet_grid(cols=vars(Service))
#  By default, a histogram will show the count of observations in each  #
#  bin on the vertical axis. Users can specify the built-in quantity,   #
#  ..density.., for the y-axis within the aesthetic function to modify  #
#  the graphic to show the density instead.                             #
ggplot(Netflix.long, aes(x=Rev.ppaid, colour=Service, fill=Service)) +
geom_histogram(aes(y=..density..), binwidth=2.5, alpha=0.3, position="identity")
#  Histograms and densities are closely related
#  Below our first layer is a histogram and then the density is in the next layer
ggplot(Netflix.long, aes(x=Rev.ppaid)) +
geom_histogram(aes(y=..density..),binwidth=2.5, colour="black", fill="white") +
geom_density()
###############
#  Line plot  #
###############
#  When the data have a natural ordering, it is important to explore    #
#  any inherent trends by looking at the values in that order. A line   #
#  plot connects each consecutively plotted observation. Plots such as  #
#  these are extremely common when dealing with time series.            #
## In ggplot2
ggplot(Netflix.long, aes(x=Yr.Qtr, y=Rev.ppaid, colour=Service, group=Service)) + geom_line()
ggplot(Netflix.long, aes(x=Yr.Qtr, y=Rev.ppaid, colour=Service, group=Service)) + geom_line() + geom_point()  # Two different Layers here with
# the same aesthetic.
ggplot(Netflix.long, aes(x=Yr.Qtr, y=Rev.ppaid, colour=Service, group=Service)) + geom_line() + geom_point(aes(shape=Service)) # Here the shape aesthetic
# is only specified for geom_point
##############
#  Bar plot  #
##############
#  Bar plots are most universally known for displaying frequencies of   #
#  qualitative data. By default, the counts of each category will be    #
#  displayed. Proportions can be designated within an aesthetic         #
#  function instead.                                                    #
## In base R
counts <- table(Ratings$rating)
barplot(counts)
## In ggplot2
ggplot(Ratings, aes(x=rating)) + geom_bar()
ggplot(Ratings, aes(x=rating)) + geom_bar(width=0.5)
ggplot(Ratings, aes(x=rating)) + geom_bar(aes(y=..prop..))
ggplot(Ratings, aes(x=rating)) + geom_bar(aes(y=..prop..),width=0.5)
#  Bar plots are often used to compare frequencies of multiple sets of  #
#  qualitative data. When plotting multiple sets of data on a single    #
#  plot, the separated bars can be stacked, overlaid, or plotted        #
#  side-by-side.                                                        #
Ratings2$movie.id <- as.factor(Ratings2$movie.id)
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar()
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position="stack")
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position ="identity")
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position="dodge")
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position=position_dodge(1))
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position=position_dodge(1), width=0.5)
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(position=position_dodge(.7), width=0.5)
ggplot(Ratings2, aes(x=rating, fill=movie.id)) + geom_bar(aes(y=..prop..), position="dodge")
#############################################################################
---
title: "Homework 4"
author: "George Corbin"
date: "October 25, 2018"
output: word_document
---
##Problem 1
###Part a
```{r}
ratings.summary = read.csv("Homework 4 Data 1.csv")
head(ratings.summary)
tail(ratings.summary)
```
###Part b
```{r}
titles = read.csv("HOmework 4 Data 2.csv",header=FALSE)
names(titles) = c("MovieID","Release.year","Movie.title")
head(titles)
tail(titles)
```
###Part c
```{r}
titles = titles[order(titles$MovieID),]
summary.final = cbind(titles[1:100,],ratings.summary[,-1])
head(summary.final)
tail(summary.final)
```
###Part d
```{r}
summary.final$Movie.title = as.character(summary.final$Movie.title)
class(summary.final$Movie.title)
```
###Part e
```{r}
summary.final = data.frame(summary.final$Movie.title,summary.final$Release.year,summary.final[,4:16])
names(summary.final)[1:2] = c("Movie.title","Release.year")
head(summary.final)
tail(summary.final)
```
###Part f
```{r}
summary.final = summary.final[order(summary.final$rating.prop.5s,decreasing=TRUE),]
head(summary.final)
tail(summary.final)
```
###Part g
The movies with the highest ratio of 5s have, on average,a much higher total number of ratings than those with the smallest proportion of 5s. The two exeptions to this, Lord of the Rings: The Return of the King and Elfen Lied both have less than 1 year between their earliest and latest rating, which gives an explanation as to why the total ratings is smaller than that of other movies with a similar proportion of 5s.
###Part h
```{r}
dif=abs(summary.final$rating.prop.5s-summary.final$rating.prop.1s)
mdif = min(dif)
sim15l = dif==mdif
summary.final[sim15l,]
```
'Jade'(1995) has the smallest difference in the proportion of 5s and 1s. This implies that it is a very 'average' movie, whose ratings are normally distributed. This is supported by the other rating proportions, with the highest rating proportion (3) at .383, 2 and 4 are roughly the same, as are 1 and 5, implying normal distribution.
#Data cleaning lab
install.packages("TTR")
install.packages("smoother")
library("TTR")
library("smoother")
library("ggplot2")
library("gcookbook")
data("heightweight")
heightweight = heightweight[order(heightweight$eightIn),]
heightweight = heightweight[order(heightweight$heightIn),]
P = ggplot(heightweight) + geom_line(aes(heightIn, weightLb))
P
#Simple moving average
ys_sma = smth(heightweight$weightLb, method = 'sma')
P + geom_line(aes(heightweight$heightIn, ys_sma, col = "red"), size=1.3)
#Binning
no_data_in_bins = 5
ys_bin = round(ave(heightweight$weightLb,
rep(1:length(heightweight$weightLb), each = no_data_in_bins, length.out =
length(heightweight$weightLb))))
P + geom_line(aes(heightweight$heightIn, ys_bin, col = "red"), size=1.3)
ys_sma = smth(heightweight$weightLb, method = 'sma')
P + geom_line(aes(heightweight$heightIn, ys_sma, col = "red"), size=1.3)
ys_sma = smth(heightweight$weightLb, method = 'sma')
P + geom_line(aes(heightweight$heightIn, ys_sma, col = "red"), size=1.3)
no_data_in_bins = 5
ys_bin = round(ave(heightweight$weightLb,
rep(1:length(heightweight$weightLb), each = no_data_in_bins, length.out =
length(heightweight$weightLb))))
P + geom_line(aes(heightweight$heightIn, ys_bin, col = "red"), size=1.3)
library(tidyverse)
data(package="tidyr")
table1
tidy4a = gather(table4a, key="year", value="cases",)
tidy4a
View(tidy4a)
View(tidy4a)
tidy4a = gather(table4a, key="year", value="cases", 2:3)
tidy4a
tidy4b = gather(table4b, key="year", value="population", 2:3)
tidy4b
-----|
table2
unique(table2$type)
spread(table2,key=type,value=count)
table3
table3_new = seperate(table3, rate, into=c("cases", "population"), sep="/", convert=TRUE)
mutate(table3, rate=case/population)
table3
table3_new = separate(table3, rate, into=c("cases", "population"), sep="/", convert=TRUE)
mutate(table3, rate=case/population)
table3
table3_new = separate(table3, rate, into=c("cases", "population"), sep="/", convert=TRUE)
mutate(table3, rate=cases/population)
table3
table3_new = separate(table3, rate, into=c("cases", "population"), sep="/", convert=TRUE)
mutate(table3_new,rate=cases/population)
table3
table3_new = separate(table3, rate, into=c("cases", "population"), sep="/", convert=TRUE)
mutate(table3_new,rate=cases/population)
url= "https://raw.githubusercontent.com/mdporter/SYS2202/master/data/date-event.csv"
df = read_csv(url)
separate(df, col=date, into=c("year", "month", "day"), sep="-", remove=FALSE, convert=TRUE)
df_new
url= "https://raw.githubusercontent.com/mdporter/SYS2202/master/data/date-event.csv"
df = read_csv(url)
df_new = separate(df, col=date, into=c("year", "month", "day"), sep="-", remove=FALSE, convert=TRUE)
df_new
df_new %>%
unite(col="USdate", month, day, year, sep="/")
#If %>% was not used
#unite(df_new, col="USdate", month, day, year, sep="/")
df %>%
seperate (col=date, into=c("year", "month", "day"), sep="-",
remove=FALSE, convert=TRUE) %>%
count (day, event) %>% arrange(day, event)
df %>%
seperate(col=date, into=c("year", "month", "day"), sep="-", remove=FALSE, convert=TRUE) %/%
count (day, event) %/%
complete(day=1:31, event=c('A','B','C','D'), fill=list(n=0L))
a=c(1,2,3,6,8,NA,14,23,NA)
is.na(a)
a[is.na(a)] = 99
df_new %>%
#The pound greater than pound series applies the function following it to the data preceeding it - removes need to decalre
#Data source in following function
df_new %>%
unite(col="USdate", month, day, year, sep="/")
#If %>% was not used
#unite(df_new, col="USdate", month, day, year, sep="/")
df %>%
separate (col=date, into=c("year", "month", "day"), sep="-",
remove=FALSE, convert=TRUE) %>%
count (day, event) %>% arrange(day, event)
df %>%
separate(col=date, into=c("year", "month", "day"), sep="-", remove=FALSE, convert=TRUE) %/%
count (day, event) %/%
complete(day=1:31, event=c('A','B','C','D'), fill=list(n=0L))
a=c(1,2,3,6,8,NA,14,23,NA)
is.na(a)
a[is.na(a)] = 99
a
View(df)
View(df)
View(df_new)
View(df_new)
library(tidyverse)
library(nycflights13)
install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
head(flights)
flights = nycflights13:flights
flights = nycflights13::flights
weather = nycflights13::weather
slice(flights, 5:8)
filter(flights, month==1, day ==1)
no_tail_flights = filter(flights, tailnum == "NA")
View(flights)
View(flights)
no_tail_flights = filter(flights, tailnum == NA)
no_tail_flights = filter(flights, tailnum != "NA")
is.na(flights$tailnum)
sum(is.na(flights$tailnum))_
sum(is.na(flights$tailnum))
sum(!is.na(flights$tailnum))
flights[!is.na(flights$tailnum))]
flights[!is.na(flights$tailnum)]
flights[!is.na(flights$tailnum),]
filter(flights, dest=="ORD")
toChicago = filter(flights, dest=="ORD")
#Or statement
filter(flights, dest %in% c("ORD, JFK"))
filter(flights, dest == "ORD" | dest == "JFK")
11|12
11&&12
arrange(flights, year, month, day)
#select() selects speciic columns
select(flights, year, month, dya)
#select() selects speciic columns
select(flights, year, month, day)
select(flight, starts_with("dep"))
select(flights, starts_with("dep"))
flights %>% select(year:day, ends_with("delay"), distance, air_time) %>% mutate(gain = arr_delay - dep_delay, speed = distance/(air_time/60))
flights %>% select(year:day, ends:with("delay"), distance, air_time) %?% transmute(gain = arr_delay - dep_delay, speed = distance/(air_time/60))
flights %>% select(year:day, ends:with("delay"), distance, air_time) %>% transmute(gain = arr_delay - dep_delay, speed = distance/(air_time/60))
flights %>% select(year:day, ends_with("delay"), distance, air_time) %>% transmute(gain = arr_delay - dep_delay, speed = distance/(air_time/60))
flights %>% mutate(z_score = (dep_delay - mean(dep_delay)) / sd(dep_delay))
flights %>% mutate(z_score = (dep_delay - mean(dep_delay, na.remove = TRUE)) / sd(dep_delay, na.remove = TRUE)
flights %>% mutate(z_score = (dep_delay - mean(dep_delay, na.remove = TRUE)) / sd(dep_delay, na.remove = TRUE))
flights %>% mutate(z_score = (dep_delay - mean(dep_delay, na.remove = TRUE)) / sd(dep_delay, na.remove = TRUE)) %>% select(z_score)
flights %>% mutate(z_score = (dep_delay - mean(dep_delay, na.rm = TRUE)) / sd(dep_delay, na.rm = TRUE)) %>% select(z_score)
flights = select(flights, -20)
#sumarize
summarize(flights, avg.dist = mean(distance))
#sumarize
poogers = summarize(flights, avg.dist = mean(distance))
View(poogers)
View(poogers)
flights %>% group_by(origin) %>% summarize(avg.delay = mean(arr_delay, na.rm = TRUE))
unemploymentMonthly = read.csv("Unemployment_monthly.csv", header=TRUE)
setwd("~/GitHub/SYS2202Final/Data")
unemploymentMonthly = read.csv("Unemployment_monthly.csv", header=TRUE)
View(unemploymentMonthly)
View(unemploymentMonthly)
setwd("~/GitHub/SYS2202Final/Data")
arrests = read.csv("Arrests.csv", header=TRUE)
Football = read.csv("College_Football_2000_2018.csv", header=TRUE)
dogtags = read.csv("Dog_Tags.csv", header=TRUE)
greenTransport = read.csv("Green_Infrastructure_Transportation.csv", header=TRUE)
RoadCenterlines = read.csv("Road_Centerlines.csv", header=TRUE)
#transit2017 = read.csv("transit_2017.csv", header=TRUE)
#transit2018 = read.csv("transit_2018.csv", header=TRUE)
#trannsit2019 = read.csv("transit_2019.csv", header=TRUE)
#transit2020 = read.csv("transit_2020.csv", header=TRUE)
unemploymentYearly = read.csv("Unemployment.csv", header=TRUE)
unemploymentMonthly = read.csv("Unemployment_monthly.csv", header=TRUE)
uvaBasketball = read.csv("UVA2019_2020BasketballSeason.csv", header=TRUE)
#----Reduce columns of Basketball data-----------------
Away = (uvaBasketball$X == '@')
Won = ((uvaBasketball$W.L == 'W') | (uvaBasketball $W.L == 'W (1 OT)'))
BasketballReduced = data.frame(uvaBasketball$Date, uvaBasketball$Opp, Won, Away)
names(BasketballReduced) = c("Date", "Opponent", "Won", "Away")
charDate = as.character(BasketballReduced$Date)
BasketballReduced$Date = as.POSIXct(charDate, format= "%m/%d/%Y")
uvaHome = ((Football$Team == "Virginia") | (Football$Team == "Virginia*"))
uvaAway = ((Football$Opponent == "Virginia") | (Football$Team == "Virginia*") | (Football$Team == "No. 21 Virginia") | (Football$Team == "No. 25 Virginia*") | (Football$Team == "No. 25 Virginia"))
uvaHomeGames = Football[uvaHome,]
uvaAwayGames = Football[uvaAway,]
homeOpp = uvaHomeGames$Opponent
AwayOpp = uvaAwayGames$Team
homeWin = (substr(uvaHomeGames$Result,1,1) == 'W')
awayWin = (substr(uvaAwayGames$Result,1,1) == 'L')
Away = c(TRUE)
Home = c(FALSE)
uvaHomeReduced = data.frame(uvaHomeGames$Date, homeOpp, homeWin, Home)
uvaAwayReduced = data.frame(uvaAwayGames$Date, AwayOpp, awayWin, Away)
names(uvaHomeReduced) = c("Date", "Opponent", "Won", "Away")
names(uvaAwayReduced) = c("Date", "Opponent", "Won", "Away")
footballReduced = rbind(uvaHomeReduced,uvaAwayReduced)
charDate = as.character(footballReduced$Date)
footballReduced$Date = as.POSIXct(charDate, format= "%m/%d/%Y")
IsBasketball = TRUE
basketballReduced = data.frame(basketballReduced,IsBasketball)
IsBasketball = FALSE
footballReduced = data.frame(footballReduced,IsBasketball)
IsBasketball = TRUE
BasketballReduced = data.frame(BasketballReduced,IsBasketball)
uvaSports = rbind(BasketballReduced, footballReduced)
View(uvaSports)
View(uvaSports)
write.csv(uvaSports,"C:/Users/Lee/Documents/GitHub/SYS2202Final/CleanedData/uvaSports.csv")
